plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.asciidoctor.jvm.convert" version '3.3.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
    }
}

group = 'com.addiction'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //Junit
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //PostgreSQL
    implementation 'org.postgresql:postgresql:42.5.0'
    // mysql-connector 추가
    implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.3.0'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL Implementation
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // h2
    runtimeOnly 'com.h2database:h2'

    // RestDocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //openfeign
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    //MongoDB
    implementation ('org.springframework.boot:spring-boot-starter-data-mongodb')
    //fcm
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    // Oracle Cloud Infrastructure Object Storage
    implementation 'com.oracle.oci.sdk:oci-java-sdk-objectstorage:3.35.0'

    // OCI SDK HTTP 클라이언트 관련 의존성
    implementation("com.oracle.oci.sdk:oci-java-sdk-common-httpclient-jersey3:3.73.0")

    // JAX-RS API (필수!)
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'

    // Jersey HTTP 클라이언트 구현체
    implementation 'org.glassfish.jersey.core:jersey-client:3.1.5'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.5'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.5'
    implementation 'org.glassfish.jersey.connectors:jersey-apache-connector:3.1.5'
    
    //mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDir querydslDir
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

ext { // 전역 변수
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources { // 특정 파일만 html로 만든다.
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile() // 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

tasks.processResources {
    // 환경 변수를 가져와서 replace
    filesMatching('application-dev.yml') {
        // build.gradle에 설정된 환경변수들을 주입
        expand(
                MONGO_DB_URL: System.getenv('MONGO_DB_URL'),
                DB_ENDPOINT: System.getenv('DB_ENDPOINT'),
                DB_USERNAME: System.getenv('DB_USERNAME'),
                DB_PASSWORD: System.getenv('DB_PASSWORD'),
                MYSQL_DB_ENDPOINT: System.getenv('MYSQL_DB_ENDPOINT'),
                MYSQL_DB_USERNAME: System.getenv('MYSQL_DB_USERNAME'),
                MYSQL_DB_PASSWORD: System.getenv('MYSQL_DB_PASSWORD'),
                JWT_SECRET_KEY: System.getenv('JWT_SECRET_KEY'),
                AES_KEY: System.getenv('AES_KEY'),
                NAMESPACE_NAME: System.getenv('NAMESPACE_NAME'),
                USER_BUCKET_NAME_DEV: System.getenv('USER_BUCKET_NAME_DEV'),
                CHALLENGE_BUCKET_NAME_DEV: System.getenv('CHALLENGE_BUCKET_NAME_DEV'),
                EMAIL_PASSWORD: System.getenv('EMAIL_PASSWORD')
        )
    }
}
